y = append(y, x)
tim = append(tim, i)
x = r * x *(1-x)
}
if (x == -Inf) break
plot(tim, y, type="l", xlim=c(0,ran+1), ylim=c(0,1))
for (i in c(2:ran+1)) {
print(x)
y = append(y, x)
tim = append(tim, i)
x = r * x *(1-x)
}
if (x == -Inf) break
plot(tim, y, type="l", xlim=c(0,ran+1), ylim=c(0,1))
x <- 0.0
for (i in c(2:ran+1)) {
print(x)
y = append(y, x)
tim = append(tim, i)
x = r * x *(1-x)
}
rm(list = ls())
## DATA
head(iris)
N = 100
X = as.matrix(iris[1:N, 1:2])
y = as.vector(iris[1:N, 5])
y[which(y == "setosa")] = -1
y[which(y == "versicolor")] = 1
y = as.numeric(y)
plot(X, col = y+3, pch = 20)
())
## DATA
N = 100
X = as.matrix(iris[1:N, 1:2])
y = as.vector(iris[1:N, 5])
y[which(y == "setosa")] = -1
y[which(y == "versicolor")] = 1
y = as.numeric(y)
plot(X, col = y+3, pch = 20)
P1 = 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 = -rep(1, N)
s1 = 0
C1 = rbind(y, -y, diag(1, N), -diag(i, N))
lambda = 0.1
d1 = c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N)
p1 = nrow(P1)
p2 = nrow(C1)
x = x0 = rep(0, p1)
z = z0 = rep(1, p2)
u = u0 = rep(0, p2)
rho = 1
M1 = -solve(1/rho * P1 + ro * t(C1) %*% C1)
Mu = (1/2) ^ (1:10)
Ta = 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu = Mu[i2]
for (i1 in 1:1000)
{
v1 = -z - d1 + u
x = M1 %*% (q1 / rho + t(C1) %*% v1)
v2 = C1 %*% x -d1 + u
z = (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u = u + (C1 %*% x -z -d1)
}
}
x.star = x
rm(list = ls())
## DATA
N = 100
X = as.matrix(iris[1:N, 1:2])
y = as.vector(iris[1:N, 5])
y[which(y == "setosa")] = -1
y[which(y == "versicolor")] = 1
y = as.numeric(y)
plot(X, col = y+3, pch = 20)
P1 = 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 = -rep(1, N)
s1 = 0
C1 = rbind(y, -y, diag(1, N), -diag(i, N))
lambda = 0.1
d1 = c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N)
p1 = nrow(P1)
p2 = nrow(C1)
x = x0 = rep(0, p1)
z = z0 = rep(1, p2)
u = u0 = rep(0, p2)
rho = 1
M1 = -solve(1/rho * P1 + ro * t(C1) %*% C1)
Mu = (1/2) ^ (1:10)
Ta = 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu = Mu[i2]
for (i1 in 1:1000)
{
v1 = -z - d1 + u
x = M1 %*% (q1 / rho + t(C1) %*% v1)
v2 = C1 %*% x -d1 + u
z = (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u = u + (C1 %*% x -z -d1)
}
}
x.star = x
rm(list <- ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col <- y+3, pch <- 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(i, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + ro * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
z <- z0 <- rep(1, p2)
p2 <- nrow(C1)
C1 <- rbind(y, -y, diag(1, N), -diag(i, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rm(list <- ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col <- y+3, pch <- 20)
rm(list <- ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col <- y+3, pch <- 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(i, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + ro * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
rm(list <- ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col <- y+3, pch <- 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(i, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + ro * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
rm(list = ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col <- y+3, pch <- 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
rm(list = ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col = y+3, pch = 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(i, N))
C1 <- rbind(y, -y, diag(1, N), -diag(1, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + ro * t(C1) %*% C1)
M1 <- -solve(1/rho * P1 + rho * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta(i2)) break
u <- u + (C1 %*% x -z -d1)
}
}
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta[i2]) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta[i2]) break
u <- u + (C1 %*% x -z -d1)
}
}
rm(list = ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col = y+3, pch = 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(1, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + rho * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta[i2]) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
x.star <- x
print(x.star)
which(C1 %*% x.star - d1 < 0)
which(C1 %*% x.star - d1 < 0)
b1 = mean(X %*% w1 - y)
apply(X, l, h)
a1 = b1/w1[2]
b1 = -w1[1]/w1[2]
plot(X, col = y+3, pch = 20)
abline(a = 1, b = b1)
x.star <- x
which(C1 %*% x.star - d1 < 0)
b1 = mean(X %*% w1 - y)
21 = colMeans( (c(x.star) * y) %o% rep(1, ncol(X)) * X)
b1 = mean(X %*% w1 - y)
h = function(x)
{
x = matrix(x, ncol=1)
return(sign(w1 %*% x - b1))
}
w1 = colMeans( (c(x.star) * y) %o% rep(1, ncol(X)) * X)
b1 = mean(X %*% w1 - y)
h = function(x)
{
x = matrix(x, ncol=1)
return(sign(w1 %*% x - b1))
}
apply(X, l, h)
apply(X, 1, h)
a1 = b1/w1[2]
b1 = -w1[1]/w1[2]
plot(X, col = y+3, pch = 20)
abline(a = 1, b = b1)
abline(a = a1, b = b1)
apply(X, 1, h)
a1 = b1/w1[2]
b1 = -w1[1]/w1[2]
plot(X, col = y+3, pch = 20)
abline(a = a1, b = b1)
abline(a = a1, b = b1, color='yellow')
plot(X, col = y+3, pch = 20)
a1 = b1/w1[2]
b1 = -w1[1]/w1[2]
plot(X, col = y+3, pch = 20)
abline(a = a1, b = b1)
rm(list = ls())
## DATA
N <- 100
X <- as.matrix(iris[1:N, 1:2])
y <- as.vector(iris[1:N, 5])
y[which(y == "setosa")] <- -1
y[which(y == "versicolor")] <- 1
y <- as.numeric(y)
plot(X, col = y+3, pch = 20)
P1 <- 1/2 * diag(y) %*% (X %*% t(X)) %*% diag(y)
q1 <- -rep(1, N)
s1 <- 0
C1 <- rbind(y, -y, diag(1, N), -diag(1, N))
lambda <- 0.1
d1 <- c(0,0, rep(0, N), rep(-1 / (2*N*lambda), N))
p1 <- nrow(P1)
p2 <- nrow(C1)
x <- x0 <- rep(0, p1)
z <- z0 <- rep(1, p2)
u <- u0 <- rep(0, p2)
rho <- 1
M1 <- -solve(1/rho * P1 + rho * t(C1) %*% C1)
Mu <- (1/2) ^ (1:10)
Ta <- 0.001 * (1/(1:10))
for (i2 in 1:length(Mu))
{
mu <- Mu[i2]
for (i1 in 1:1000)
{
v1 <- -z - d1 + u
x <- M1 %*% (q1 / rho + t(C1) %*% v1)
v2 <- C1 %*% x -d1 + u
z <- (1/2) * (v2 + sqrt(v2^2 + 4 * mu / rho))
if (sum(abs(C1 %*% x - z - d1)) < Ta[i2]) break
u <- u + (C1 %*% x -z -d1)
}
}
x.star <- x
which(C1 %*% x.star - d1 < 0)
w1 = colMeans( (c(x.star) * y) %o% rep(1, ncol(X)) * X)
b1 = mean(X %*% w1 - y)
h = function(x)
{
x = matrix(x, ncol=1)
return(sign(w1 %*% x - b1))
}
apply(X, 1, h)
a1 = b1/w1[2]
b1 = -w1[1]/w1[2]
plot(X, col = y+3, pch = 20)
abline(a = a1, b = b1)
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
#(參數2)(參數3)去除兩個樣本組答案
knnTrain <- traindata[, - c(5)]
knnTest <- testdata[, - c(5)]
#計算k值(幾個鄰居)通常可以用資料數的平方根
kv <- round(sqrt(n))
kv
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
pkgs <- c("magrittr", "dplyr")
install.packages(pkgs)
install.packages(pkgs)
library(magrittr)
library(dplyr)
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
pkgs <- c("magrittr", "dplyr")
install.packages(pkgs)
install.packages(pkgs)
kkkkkk
library(magrittr)
library(dplyr)
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
library(dplyr)
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
library(magrittr)
library(dplyr)
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
#(參數2)(參數3)去除兩個樣本組答案
knnTrain <- traindata[, - c(5)]
knnTest <- testdata[, - c(5)]
#計算k值(幾個鄰居)通常可以用資料數的平方根
kv <- round(sqrt(n))
kv
#(4)建立模型
prediction <- knn(train = knnTrain, test = knnTest, cl = trainLabels, k = kv)
#(5)評估正確性
cm <- table(x = testdata$Species, y = prediction, dnn = c("實際", "預測"))
cm
knnaccuracy <- sum(diag(cm)) / sum(cm)
knnaccuracy
